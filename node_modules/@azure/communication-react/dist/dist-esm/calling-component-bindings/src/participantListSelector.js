// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { toFlatCommunicationIdentifier } from "../../acs-ui-common/src";
import { createSelector } from 'reselect';
import { getIdentifier, getDisplayName, getRemoteParticipants, getIsScreenSharingOn, getIsMuted } from './baseSelectors';
import { getIdentifierKind } from '@azure/communication-common';
const convertRemoteParticipantsToParticipantListParticipants = (remoteParticipants) => {
    return (remoteParticipants
        // temporarily hiding lobby participants in ACS clients till we can admit users through ACS clients
        .filter((participant) => {
        return participant.state !== 'InLobby';
    })
        .map((participant) => {
        const isScreenSharing = Object.values(participant.videoStreams).some((videoStream) => videoStream.mediaStreamType === 'ScreenSharing' && videoStream.isAvailable);
        return {
            userId: toFlatCommunicationIdentifier(participant.identifier),
            displayName: participant.displayName,
            state: participant.state,
            isMuted: participant.isMuted,
            isScreenSharing: isScreenSharing,
            isSpeaking: participant.isSpeaking,
            // ACS users can not remove Teams users.
            // Removing phone numbers or unknown types of users is undefined.
            isRemovable: getIdentifierKind(participant.identifier).kind === 'communicationUser'
        };
    })
        .sort((a, b) => {
        var _a, _b;
        const nameA = ((_a = a.displayName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
        const nameB = ((_b = b.displayName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || '';
        if (nameA < nameB) {
            return -1;
        }
        else if (nameA > nameB) {
            return 1;
        }
        else {
            return 0;
        }
    }));
};
/**
 * Selects data that drives {@link ParticipantList} component.
 *
 * @public
 */
export const participantListSelector = createSelector([getIdentifier, getDisplayName, getRemoteParticipants, getIsScreenSharingOn, getIsMuted], (userId, displayName, remoteParticipants, isScreenSharingOn, isMuted) => {
    const participants = remoteParticipants
        ? convertRemoteParticipantsToParticipantListParticipants(Object.values(remoteParticipants))
        : [];
    participants.push({
        userId: userId,
        displayName: displayName,
        isScreenSharing: isScreenSharingOn,
        isMuted: isMuted,
        state: 'Connected',
        // Local participant can never remove themselves.
        isRemovable: false
    });
    return {
        participants: participants,
        myUserId: userId
    };
});
//# sourceMappingURL=participantListSelector.js.map