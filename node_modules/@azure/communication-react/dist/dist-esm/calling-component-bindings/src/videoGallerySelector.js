// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { memoizeFnAll, toFlatCommunicationIdentifier } from "../../acs-ui-common/src";
import { createSelector } from 'reselect';
import { getDisplayName, getDominantSpeakers, getIdentifier, getIsMuted, getIsScreenSharingOn, getLocalVideoStreams, getRemoteParticipants, getScreenShareRemoteParticipant } from './baseSelectors';
import { checkIsSpeaking } from './SelectorUtils';
const convertRemoteVideoStreamToVideoGalleryStream = (stream) => {
    var _a, _b;
    return {
        id: stream.id,
        isAvailable: stream.isAvailable,
        isMirrored: (_a = stream.view) === null || _a === void 0 ? void 0 : _a.isMirrored,
        renderElement: (_b = stream.view) === null || _b === void 0 ? void 0 : _b.target
    };
};
const convertRemoteParticipantToVideoGalleryRemoteParticipant = (userId, isMuted, isSpeaking, videoStreams, displayName) => {
    const rawVideoStreamsArray = Object.values(videoStreams);
    let videoStream = undefined;
    let screenShareStream = undefined;
    if (rawVideoStreamsArray[0]) {
        if (rawVideoStreamsArray[0].mediaStreamType === 'Video') {
            videoStream = convertRemoteVideoStreamToVideoGalleryStream(rawVideoStreamsArray[0]);
        }
        else {
            screenShareStream = convertRemoteVideoStreamToVideoGalleryStream(rawVideoStreamsArray[0]);
        }
    }
    if (rawVideoStreamsArray[1]) {
        if (rawVideoStreamsArray[1].mediaStreamType === 'ScreenSharing') {
            screenShareStream = convertRemoteVideoStreamToVideoGalleryStream(rawVideoStreamsArray[1]);
        }
        else {
            videoStream = convertRemoteVideoStreamToVideoGalleryStream(rawVideoStreamsArray[1]);
        }
    }
    return {
        userId,
        displayName,
        isMuted,
        isSpeaking,
        videoStream,
        screenShareStream,
        isScreenSharingOn: screenShareStream !== undefined && screenShareStream.isAvailable
    };
};
const memoizedAllConvertRemoteParticipant = memoizeFnAll((userId, isMuted, isSpeaking, videoStreams, displayName) => {
    return convertRemoteParticipantToVideoGalleryRemoteParticipant(userId, isMuted, isSpeaking, videoStreams, displayName);
});
const videoGalleryRemoteParticipantsMemo = (remoteParticipants) => {
    if (!remoteParticipants) {
        return [];
    }
    return memoizedAllConvertRemoteParticipant((memoizedFn) => {
        return Object.values(remoteParticipants)
            .filter((participant) => {
            return participant.state !== 'InLobby';
        })
            .map((participant) => {
            return memoizedFn(toFlatCommunicationIdentifier(participant.identifier), participant.isMuted, checkIsSpeaking(participant), participant.videoStreams, participant.displayName);
        });
    });
};
const dominantSpeakersWithFlatId = (dominantSpeakers) => {
    return dominantSpeakers === null || dominantSpeakers === void 0 ? void 0 : dominantSpeakers.speakersList.map(toFlatCommunicationIdentifier);
};
/**
 * Provides data attributes to {@link VideoGallery} component.
 * @public
 */
export const videoGallerySelector = createSelector([
    getScreenShareRemoteParticipant,
    getRemoteParticipants,
    getLocalVideoStreams,
    getIsMuted,
    getIsScreenSharingOn,
    getDisplayName,
    getIdentifier,
    getDominantSpeakers
], (screenShareRemoteParticipantId, remoteParticipants, localVideoStreams, isMuted, isScreenSharingOn, displayName, identifier, dominantSpeakers) => {
    var _a, _b;
    const screenShareRemoteParticipant = screenShareRemoteParticipantId && remoteParticipants
        ? remoteParticipants[screenShareRemoteParticipantId]
        : undefined;
    const localVideoStream = localVideoStreams === null || localVideoStreams === void 0 ? void 0 : localVideoStreams.find((i) => i.mediaStreamType === 'Video');
    const dominantSpeakerIds = dominantSpeakersWithFlatId(dominantSpeakers);
    const dominantSpeakersMap = {};
    dominantSpeakerIds === null || dominantSpeakerIds === void 0 ? void 0 : dominantSpeakerIds.forEach((speaker, idx) => (dominantSpeakersMap[speaker] = idx));
    return {
        screenShareParticipant: screenShareRemoteParticipant
            ? convertRemoteParticipantToVideoGalleryRemoteParticipant(toFlatCommunicationIdentifier(screenShareRemoteParticipant.identifier), screenShareRemoteParticipant.isMuted, checkIsSpeaking(screenShareRemoteParticipant), screenShareRemoteParticipant.videoStreams, screenShareRemoteParticipant.displayName)
            : undefined,
        localParticipant: {
            userId: identifier,
            displayName: displayName !== null && displayName !== void 0 ? displayName : '',
            isMuted: isMuted,
            isScreenSharingOn: isScreenSharingOn,
            videoStream: {
                isAvailable: !!localVideoStream,
                isMirrored: (_a = localVideoStream === null || localVideoStream === void 0 ? void 0 : localVideoStream.view) === null || _a === void 0 ? void 0 : _a.isMirrored,
                renderElement: (_b = localVideoStream === null || localVideoStream === void 0 ? void 0 : localVideoStream.view) === null || _b === void 0 ? void 0 : _b.target
            }
        },
        remoteParticipants: videoGalleryRemoteParticipantsMemo(remoteParticipants),
        dominantSpeakers: dominantSpeakerIds
    };
});
//# sourceMappingURL=videoGallerySelector.js.map