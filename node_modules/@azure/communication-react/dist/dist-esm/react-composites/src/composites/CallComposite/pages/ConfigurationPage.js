// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import React from 'react';
import { useAdaptedSelector } from '../hooks/useAdaptedSelector';
import { useHandlers } from '../hooks/useHandlers';
import { LocalDeviceSettings } from '../components/LocalDeviceSettings';
import { StartCallButton } from '../components/StartCallButton';
import { devicePermissionSelector } from '../selectors/devicePermissionSelector';
import { useSelector } from '../hooks/useSelector';
import { DevicesButton } from "../../../../../react-components/src";
import { getCallingSelector } from "../../../../../calling-component-bindings/src";
import { Stack } from '@fluentui/react';
import { LocalPreview } from '../components/LocalPreview';
import { callDetailsStyleDesktop, callDetailsStyleMobile, configurationStackTokensDesktop, configurationStackTokensMobile, configurationContainerStyleDesktop, configurationContainerStyleMobile, selectionContainerStyle, startCallButtonContainerStyleDesktop, startCallButtonContainerStyleMobile, startCallButtonStyleMobile, titleContainerStyleDesktop, titleContainerStyleMobile, callDetailsContainerStylesDesktop } from '../styles/CallConfiguration.styles';
import { useLocale } from '../../localization';
/**
 * @private
 */
export const ConfigurationPage = (props) => {
    const { startCallHandler, mobileView } = props;
    const options = useAdaptedSelector(getCallingSelector(DevicesButton));
    const localDeviceSettingsHandlers = useHandlers(LocalDeviceSettings);
    const { video: cameraPermissionGranted, audio: microphonePermissionGranted } = useSelector(devicePermissionSelector);
    const locale = useLocale();
    const title = (React.createElement(Stack.Item, { className: mobileView ? titleContainerStyleMobile : titleContainerStyleDesktop }, locale.strings.call.configurationPageTitle));
    const callDescription = locale.strings.call.configurationPageCallDetails && (React.createElement(Stack.Item, { className: mobileView ? callDetailsStyleMobile : callDetailsStyleDesktop }, locale.strings.call.configurationPageCallDetails));
    return (React.createElement(Stack, { horizontal: !mobileView, horizontalAlign: mobileView ? 'stretch' : 'center', verticalAlign: "center", tokens: mobileView ? configurationStackTokensMobile : configurationStackTokensDesktop, className: mobileView ? configurationContainerStyleMobile : configurationContainerStyleDesktop },
        mobileView && (React.createElement(Stack.Item, null,
            title,
            callDescription)),
        React.createElement(LocalPreview, { mobileView: mobileView, showDevicesButton: mobileView }),
        React.createElement(Stack, { className: mobileView ? undefined : selectionContainerStyle },
            !mobileView && (React.createElement(React.Fragment, null,
                React.createElement(Stack.Item, { styles: callDetailsContainerStylesDesktop },
                    title,
                    callDescription),
                React.createElement(LocalDeviceSettings, Object.assign({}, options, localDeviceSettingsHandlers, { cameraPermissionGranted: cameraPermissionGranted, microphonePermissionGranted: microphonePermissionGranted })))),
            React.createElement(Stack, { styles: mobileView ? startCallButtonContainerStyleMobile : startCallButtonContainerStyleDesktop },
                React.createElement(StartCallButton, { className: mobileView ? startCallButtonStyleMobile : undefined, onClickHandler: startCallHandler, isDisabled: !microphonePermissionGranted })))));
};
//# sourceMappingURL=ConfigurationPage.js.map