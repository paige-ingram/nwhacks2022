// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import React from 'react';
import { ErrorBar } from "../../../../../react-components/src";
import { useSelector } from '../hooks/useSelector';
import { lobbySelector } from '../selectors/lobbySelector';
import { CallArrangement } from '../components/CallArrangement';
import { usePropsFor } from '../hooks/usePropsFor';
import { LobbyTile } from '../components/LobbyTile';
import { getCallStatus } from '../selectors/baseSelectors';
import { reduceCallControlsForMobile } from '../utils';
import { useLocale } from '../../localization';
import { Icon } from '@fluentui/react';
import { useLocalVideoStartTrigger } from '../components/MediaGallery';
/**
 * @private
 */
export const LobbyPage = (props) => {
    var _a, _b, _c;
    const errorBarProps = usePropsFor(ErrorBar);
    const lobbyProps = useSelector(lobbySelector);
    const strings = useLocale().strings.call;
    const callState = useSelector(getCallStatus);
    const inLobby = callState === 'InLobby';
    useLocalVideoStartTrigger(lobbyProps.localParticipantVideoStream.isAvailable, inLobby);
    // Reduce the controls shown when mobile view is enabled.
    let callControlOptions = props.mobileView
        ? reduceCallControlsForMobile((_a = props.options) === null || _a === void 0 ? void 0 : _a.callControls)
        : (_b = props.options) === null || _b === void 0 ? void 0 : _b.callControls;
    callControlOptions = disableLobbyPageControls(callControlOptions);
    return (React.createElement(CallArrangement, { complianceBannerProps: {}, errorBarProps: ((_c = props.options) === null || _c === void 0 ? void 0 : _c.errorBar) !== false && Object.assign({}, errorBarProps), callControlProps: callControlOptions !== false && {
            options: callControlOptions,
            increaseFlyoutItemSize: props.mobileView
        }, mobileView: props.mobileView, onRenderGalleryContent: () => React.createElement(LobbyTile, Object.assign({}, lobbyProps, { overlayProps: overlayProps(strings, inLobby) })), dataUiId: 'lobby-page' }));
};
const disableLobbyPageControls = (callControlOptions) => {
    let newOptions = callControlOptions;
    if (newOptions !== false) {
        if (newOptions === true || newOptions === undefined) {
            newOptions = {
                participantsButton: { disabled: true },
                screenShareButton: { disabled: true }
            };
        }
        else {
            if (newOptions.participantsButton !== false) {
                newOptions.participantsButton = { disabled: true };
            }
            if (newOptions.screenShareButton !== false) {
                newOptions.screenShareButton = { disabled: true };
            }
        }
    }
    return newOptions;
};
const overlayProps = (strings, inLobby) => inLobby ? overlayPropsWaitingToBeAdmitted(strings, inLobby) : overlayPropsConnectingToCall(strings, inLobby);
const overlayPropsConnectingToCall = (strings, inLobby) => ({
    title: strings.lobbyScreenConnectingToCallTitle,
    moreDetails: strings.lobbyScreenConnectingToCallMoreDetails,
    overlayIcon: React.createElement(Icon, { iconName: "LobbyScreenConnectingToCall" })
});
const overlayPropsWaitingToBeAdmitted = (strings, inLobby) => ({
    title: strings.lobbyScreenWaitingToBeAdmittedTitle,
    moreDetails: strings.lobbyScreenWaitingToBeAdmittedMoreDetails,
    overlayIcon: React.createElement(Icon, { iconName: "LobbyScreenWaitingToBeAdmitted" })
});
//# sourceMappingURL=LobbyPage.js.map