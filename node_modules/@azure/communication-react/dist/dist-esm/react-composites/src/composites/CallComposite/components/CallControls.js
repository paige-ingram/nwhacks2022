// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { mergeStyleSets, Stack } from '@fluentui/react';
import { _isInLobbyOrConnecting } from "../../../../../calling-component-bindings/src";
import { CameraButton, ControlBar, DevicesButton, EndCallButton, MicrophoneButton, ParticipantsButton, ScreenShareButton } from "../../../../../react-components/src";
import React, { useMemo } from 'react';
import { useLocale } from '../../localization';
import { usePropsFor } from '../hooks/usePropsFor';
import { useSelector } from '../hooks/useSelector';
import { getCallStatus, getLocalMicrophoneEnabled } from '../selectors/baseSelectors';
import { controlButtonBaseStyle, devicesButtonWithIncreasedTouchTargets, groupCallLeaveButtonCompressedStyle, groupCallLeaveButtonStyle, participantButtonWithIncreasedTouchTargets } from '../styles/CallControls.styles';
/**
 * @private
 */
export const CallControls = (props) => {
    var _a, _b;
    const { callInvitationURL, onFetchParticipantMenuItems } = props;
    const options = typeof props.options === 'boolean' ? {} : props.options;
    const callStatus = useSelector(getCallStatus);
    const isLocalMicrophoneEnabled = useSelector(getLocalMicrophoneEnabled);
    const strings = useLocale().strings.call;
    /**
     * When call is in Lobby, microphone button should be disabled.
     * This is due to to headless limitation where a call can not be muted/unmuted in lobby.
     */
    const microphoneButtonProps = usePropsFor(MicrophoneButton);
    if (_isInLobbyOrConnecting(callStatus)) {
        microphoneButtonProps.disabled = true;
        // Lobby page should show the microphone status that was set on the local preview/configuration
        // page until the user successfully joins the call.
        microphoneButtonProps.checked = isLocalMicrophoneEnabled;
    }
    const microphoneButtonStrings = _isInLobbyOrConnecting(callStatus)
        ? {
            strings: {
                tooltipOffContent: strings.microphoneToggleInLobbyNotAllowed,
                tooltipOnContent: strings.microphoneToggleInLobbyNotAllowed
            }
        }
        : {};
    const cameraButtonProps = usePropsFor(CameraButton);
    const screenShareButtonProps = usePropsFor(ScreenShareButton);
    const participantsButtonProps = usePropsFor(ParticipantsButton);
    const devicesButtonProps = usePropsFor(DevicesButton);
    const hangUpButtonProps = usePropsFor(EndCallButton);
    const participantsButtonStyles = useMemo(() => mergeButtonBaseStyles(props.increaseFlyoutItemSize ? participantButtonWithIncreasedTouchTargets : {}), [props.increaseFlyoutItemSize]);
    const devicesButtonStyles = useMemo(() => mergeButtonBaseStyles(props.increaseFlyoutItemSize ? devicesButtonWithIncreasedTouchTargets : {}), [props.increaseFlyoutItemSize]);
    const compactMode = (options === null || options === void 0 ? void 0 : options.displayType) === 'compact';
    const microphoneButton = (options === null || options === void 0 ? void 0 : options.microphoneButton) !== false && (React.createElement(MicrophoneButton, Object.assign({ "data-ui-id": "call-composite-microphone-button" }, microphoneButtonProps, { showLabel: !compactMode, styles: controlButtonBaseStyle }, microphoneButtonStrings)));
    const cameraButton = (options === null || options === void 0 ? void 0 : options.cameraButton) !== false && (React.createElement(CameraButton, Object.assign({ "data-ui-id": "call-composite-camera-button" }, cameraButtonProps, { showLabel: !compactMode, styles: controlButtonBaseStyle })));
    const screenShareButton = (options === null || options === void 0 ? void 0 : options.screenShareButton) !== false && (React.createElement(ScreenShareButton, Object.assign({ "data-ui-id": "call-composite-screenshare-button" }, screenShareButtonProps, { showLabel: !compactMode, disabled: (options === null || options === void 0 ? void 0 : options.screenShareButton) !== true && ((_a = options === null || options === void 0 ? void 0 : options.screenShareButton) === null || _a === void 0 ? void 0 : _a.disabled) })));
    const participantButton = (options === null || options === void 0 ? void 0 : options.participantsButton) !== false && (React.createElement(ParticipantsButton, Object.assign({ "data-ui-id": "call-composite-participants-button" }, participantsButtonProps, { showLabel: !compactMode, callInvitationURL: callInvitationURL, onFetchParticipantMenuItems: onFetchParticipantMenuItems, disabled: (options === null || options === void 0 ? void 0 : options.participantsButton) !== true && ((_b = options === null || options === void 0 ? void 0 : options.participantsButton) === null || _b === void 0 ? void 0 : _b.disabled), styles: participantsButtonStyles })));
    const devicesButton = (options === null || options === void 0 ? void 0 : options.devicesButton) !== false && (React.createElement(DevicesButton
    /* By setting `persistMenu?` to true, we prevent options menu from getting hidden every time a participant joins or leaves. */
    , Object.assign({ 
        /* By setting `persistMenu?` to true, we prevent options menu from getting hidden every time a participant joins or leaves. */
        persistMenu: true }, devicesButtonProps, { showLabel: !compactMode, styles: devicesButtonStyles })));
    const endCallButton = (options === null || options === void 0 ? void 0 : options.endCallButton) !== false && (React.createElement(EndCallButton, Object.assign({ "data-ui-id": "call-composite-hangup-button" }, hangUpButtonProps, { styles: compactMode ? groupCallLeaveButtonCompressedStyle : groupCallLeaveButtonStyle, showLabel: !compactMode })));
    return (React.createElement(Stack, { horizontalAlign: "center" },
        React.createElement(Stack.Item, null,
            React.createElement(ControlBar, { layout: "horizontal" },
                microphoneButton,
                cameraButton,
                screenShareButton,
                participantButton,
                devicesButton,
                endCallButton))));
};
const mergeButtonBaseStyles = (styles) => mergeStyleSets(controlButtonBaseStyle, styles);
//# sourceMappingURL=CallControls.js.map