// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { Dropdown, Icon, Label, mergeStyles, Stack } from '@fluentui/react';
import { useTheme } from "../../../../../react-components/src";
import React from 'react';
import { useLocale } from '../../localization';
import { dropDownStyles, dropDownTitleIconStyles, mainStackTokens, optionIconStyles } from '../styles/LocalDeviceSettings.styles';
const getDropDownList = (list) => {
    // Remove duplicates
    const noDuplicates = new Map();
    for (const item of list) {
        noDuplicates.set(item.id, item);
    }
    const dropdownList = [];
    for (const item of noDuplicates.values()) {
        dropdownList.push({
            key: item.id,
            text: item.name === '' ? item.deviceType : item.name
        });
    }
    return dropdownList;
};
const getOptionIcon = (type) => {
    if (type === 'Camera') {
        return React.createElement(Icon, { iconName: "LocalDeviceSettingsCamera", className: optionIconStyles });
    }
    else if (type === 'Microphone') {
        return React.createElement(Icon, { iconName: "LocalDeviceSettingsMic", className: optionIconStyles });
    }
    else if (type === 'Speaker') {
        return React.createElement(Icon, { iconName: "LocalDeviceSettingsSpeaker", className: optionIconStyles });
    }
    else {
        return undefined;
    }
};
const onRenderTitle = (iconType, props) => {
    const icon = props && getOptionIcon(iconType);
    return props ? (React.createElement("div", { className: dropDownTitleIconStyles },
        icon,
        React.createElement("span", null, props[0].text))) : (React.createElement(React.Fragment, null));
};
const localVideoViewOptions = {
    scalingMode: 'Crop',
    isMirrored: true
};
/**
 * @private
 */
export const LocalDeviceSettings = (props) => {
    var _a;
    const theme = useTheme();
    const locale = useLocale();
    const defaultPlaceHolder = locale.strings.call.defaultPlaceHolder;
    const cameraLabel = locale.strings.call.cameraLabel;
    const soundLabel = locale.strings.call.soundLabel;
    // TODO: speaker permission is tied to microphone permission (when you request 'audio' permission using the SDK) its
    // actually granting access to query both microphone and speaker. However the browser popup asks you explicity for
    // 'microphone'. This needs investigation on how we want to handle this and maybe needs follow up with SDK team.
    return (React.createElement(Stack, { "data-ui-id": "call-composite-device-settings", tokens: mainStackTokens },
        React.createElement(Stack, null,
            React.createElement(Label, { id: 'call-composite-local-camera-settings-label', className: mergeStyles(dropDownStyles(theme).label), disabled: !props.cameraPermissionGranted }, cameraLabel),
            React.createElement(Dropdown, { "data-ui-id": "call-composite-local-camera-settings", "aria-labelledby": 'call-composite-local-camera-settings-label', placeholder: defaultPlaceHolder, options: props.cameraPermissionGranted ? getDropDownList(props.cameras) : [{ key: 'deniedOrUnknown', text: '' }], styles: dropDownStyles(theme), disabled: !props.cameraPermissionGranted, errorMessage: props.cameraPermissionGranted === undefined || props.cameraPermissionGranted
                    ? undefined
                    : locale.strings.call.cameraPermissionDenied, defaultSelectedKey: props.cameraPermissionGranted
                    ? props.selectedCamera
                        ? props.selectedCamera.id
                        : props.cameras
                            ? (_a = props.cameras[0]) === null || _a === void 0 ? void 0 : _a.id
                            : ''
                    : 'deniedOrUnknown', onChange: (event, option, index) => {
                    props.onSelectCamera(props.cameras[index !== null && index !== void 0 ? index : 0], localVideoViewOptions);
                }, onRenderTitle: (props) => onRenderTitle('Camera', props) })),
        React.createElement(Stack, null,
            React.createElement(Label, { id: 'call-composite-local-sound-settings-label', className: mergeStyles(dropDownStyles(theme).label), disabled: !props.microphonePermissionGranted }, soundLabel),
            React.createElement(Stack, { "data-ui-id": "call-composite-sound-settings", tokens: mainStackTokens },
                React.createElement(Dropdown, { "aria-labelledby": 'call-composite-local-sound-settings-label', placeholder: defaultPlaceHolder, styles: dropDownStyles(theme), disabled: !props.microphonePermissionGranted, errorMessage: props.microphonePermissionGranted === undefined || props.microphonePermissionGranted
                        ? undefined
                        : locale.strings.call.microphonePermissionDenied, options: props.microphonePermissionGranted
                        ? getDropDownList(props.microphones)
                        : [{ key: 'deniedOrUnknown', text: '' }], defaultSelectedKey: props.microphonePermissionGranted
                        ? props.selectedMicrophone
                            ? props.selectedMicrophone.id
                            : defaultDeviceId(props.microphones)
                        : 'deniedOrUnknown', onChange: (event, option, index) => {
                        props.onSelectMicrophone(props.microphones[index !== null && index !== void 0 ? index : 0]);
                    }, onRenderTitle: (props) => onRenderTitle('Microphone', props) }),
                React.createElement(Dropdown, { "aria-labelledby": 'call-composite-local-sound-settings-label', placeholder: defaultPlaceHolder, styles: dropDownStyles(theme), disabled: props.speakers.length === 0, options: getDropDownList(props.speakers), defaultSelectedKey: props.selectedSpeaker ? props.selectedSpeaker.id : defaultDeviceId(props.speakers), onChange: (event, option, index) => {
                        props.onSelectSpeaker(props.speakers[index !== null && index !== void 0 ? index : 0]);
                    }, onRenderTitle: (props) => onRenderTitle('Speaker', props) })))));
};
const defaultDeviceId = (devices) => {
    if (devices.length === 0) {
        return '';
    }
    const defaultDevice = devices.find((device) => device.isSystemDefault);
    if (defaultDevice) {
        return defaultDevice.id;
    }
    return devices[0].id;
};
//# sourceMappingURL=LocalDeviceSettings.js.map