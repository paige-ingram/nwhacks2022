import { CommunicationIdentifierKind } from '@azure/communication-common';
import { AudioDeviceInfo, DeviceAccess, DominantSpeakersInfo, VideoDeviceInfo } from '@azure/communication-calling';
import { CallEndReason, CallState as CallStatus, RemoteParticipantState as RemoteParticipantStatus } from '@azure/communication-calling';
import { CallState, CallClientState, LocalVideoStreamState, RemoteParticipantState, RemoteVideoStreamState, IncomingCallState, VideoStreamRendererViewState, CallAgentState, CallErrorTarget } from './CallClientState';
import { CallStateModifier } from './StatefulCallClient';
/**
 * @private
 */
export declare const MAX_CALL_HISTORY_LENGTH = 10;
/**
 * @private
 */
export declare class CallContext {
    private _state;
    private _emitter;
    private _atomicId;
    private _batchMode;
    constructor(userId: CommunicationIdentifierKind, maxListeners?: number);
    getState(): CallClientState;
    setState(state: CallClientState): void;
    modifyState(modifier: CallStateModifier): void;
    /**
     * Batch updates to minimize `stateChanged` events across related operations.
     *
     * - A maximum of one `stateChanged` event is emitted, at the end of the operations.
     * - No `stateChanged` event is emitted if the state did not change through the operations.
     * - In case of an exception, state is reset to the prior value and no `stateChanged` event is emitted.
     *
     * All operations finished in this batch should be synchronous.
     * This function is not reentrant -- do not call batch() from within another batch().
     */
    batch(operations: () => void): void;
    onStateChange(handler: (state: CallClientState) => void): void;
    offStateChange(handler: (state: CallClientState) => void): void;
    clearCallRelatedState(): void;
    setCallAgent(callAgent: CallAgentState): void;
    setCall(call: CallState): void;
    removeCall(callId: string): void;
    setCallEnded(callId: string, callEndReason: CallEndReason | undefined): void;
    setCallState(callId: string, state: CallStatus): void;
    setCallId(newCallId: string, oldCallId: string): void;
    setCallIsScreenSharingOn(callId: string, isScreenSharingOn: boolean): void;
    setCallRemoteParticipants(callId: string, addRemoteParticipant: RemoteParticipantState[], removeRemoteParticipant: string[]): void;
    setCallRemoteParticipantsEnded(callId: string, addRemoteParticipant: RemoteParticipantState[], removeRemoteParticipant: string[]): void;
    setCallLocalVideoStream(callId: string, streams: LocalVideoStreamState[]): void;
    setCallIsMicrophoneMuted(callId: string, isMicrophoneMuted: boolean): void;
    setCallDominantSpeakers(callId: string, dominantSpeakers: DominantSpeakersInfo): void;
    setCallRecordingActive(callId: string, isRecordingActive: boolean): void;
    setCallTranscriptionActive(callId: string, isTranscriptionActive: boolean): void;
    setCallScreenShareParticipant(callId: string, participantKey: string | undefined): void;
    setLocalVideoStreamRendererView(callId: string, view: VideoStreamRendererViewState | undefined): void;
    setParticipantState(callId: string, participantKey: string, state: RemoteParticipantStatus): void;
    setParticipantIsMuted(callId: string, participantKey: string, muted: boolean): void;
    setParticipantDisplayName(callId: string, participantKey: string, displayName: string): void;
    setParticipantIsSpeaking(callId: string, participantKey: string, isSpeaking: boolean): void;
    setParticipantVideoStream(callId: string, participantKey: string, stream: RemoteVideoStreamState): void;
    setRemoteVideoStreamIsAvailable(callId: string, participantKey: string, streamId: number, isAvailable: boolean): void;
    setRemoteVideoStreams(callId: string, participantKey: string, addRemoteVideoStream: RemoteVideoStreamState[], removeRemoteVideoStream: number[]): void;
    setRemoteVideoStreamRendererView(callId: string, participantKey: string, streamId: number, view: VideoStreamRendererViewState | undefined): void;
    setIncomingCall(call: IncomingCallState): void;
    removeIncomingCall(callId: string): void;
    setIncomingCallEnded(callId: string, callEndReason: CallEndReason | undefined): void;
    setDeviceManagerIsSpeakerSelectionAvailable(isSpeakerSelectionAvailable: boolean): void;
    setDeviceManagerSelectedMicrophone(selectedMicrophone?: AudioDeviceInfo): void;
    setDeviceManagerSelectedSpeaker(selectedSpeaker?: AudioDeviceInfo): void;
    setDeviceManagerSelectedCamera(selectedCamera?: VideoDeviceInfo): void;
    setDeviceManagerCameras(cameras: VideoDeviceInfo[]): void;
    setDeviceManagerMicrophones(microphones: AudioDeviceInfo[]): void;
    setDeviceManagerSpeakers(speakers: AudioDeviceInfo[]): void;
    setDeviceManagerDeviceAccess(deviceAccess: DeviceAccess): void;
    setDeviceManagerUnparentedView(localVideoStream: LocalVideoStreamState, view: VideoStreamRendererViewState | undefined): void;
    deleteDeviceManagerUnparentedView(localVideoStream: LocalVideoStreamState): void;
    getAndIncrementAtomicId(): number;
    /**
     * Tees any errors encountered in an async function to the state.
     *
     * @param action Async function to execute.
     * @param target The error target to tee error to.
     * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.
     * @throws CallError. Exceptions thrown from `f` are tagged with the failed `target.
     */
    withAsyncErrorTeedToState<Args extends unknown[], R>(action: (...args: Args) => Promise<R>, target: CallErrorTarget): (...args: Args) => Promise<R>;
    /**
     * Tees any errors encountered in an function to the state.
     *
     * @param action Function to execute.
     * @param target The error target to tee error to.
     * @returns Result of calling `f`. Also re-raises any exceptions thrown from `f`.
     * @throws CallError. Exceptions thrown from `f` are tagged with the failed `target.
     */
    withErrorTeedToState<Args extends unknown[], R>(action: (...args: Args) => R, target: CallErrorTarget): (...args: Args) => R;
    private setLatestError;
}
//# sourceMappingURL=CallContext.d.ts.map