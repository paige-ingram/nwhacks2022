// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { mergeStyles } from '@fluentui/react';
import { Chat, Text } from '@fluentui/react-northstar';
import React, { useCallback, useRef, useState } from 'react';
import { chatMessageEditedTagStyle, chatMessageDateStyle } from '../styles/ChatMessageComponent.styles';
import { formatTimeForChatMessage, formatTimestampForChatMessage } from '../utils/Datetime';
import { useIdentifiers } from '../../identifiers/IdentifierProvider';
import { useTheme } from '../../theming';
import { ChatMessageActionFlyout } from './ChatMessageActionsFlyout';
import { ChatMessageContent } from './ChatMessageContent';
import { chatMessageActionMenuProps } from './ChatMessageActionMenu';
/** @private */
export const ChatMessageComponentAsMessageBubble = (props) => {
    const ids = useIdentifiers();
    const theme = useTheme();
    const { message, onRemoveClick, disableEditing, showDate, messageContainerStyle, strings, onEditClick } = props;
    // Track if the action menu was opened by touch - if so we increase the touch targets for the items
    const [wasInteractionByTouch, setWasInteractionByTouch] = useState(false);
    // The chat message action flyout should target the Chat.Message action menu if clicked,
    // or target the chat message if opened via touch press.
    // Undefined indicates the flyout menu should not be being shown.
    const messageRef = useRef(null);
    const messageActionButtonRef = useRef(null);
    const [chatMessageActionFlyoutTarget, setChatMessageActionFlyoutTarget] = useState(undefined);
    const chatActionsEnabled = !disableEditing && message.status !== 'sending' && !!message.mine;
    const actionMenuProps = wasInteractionByTouch
        ? undefined
        : chatMessageActionMenuProps({
            enabled: chatActionsEnabled,
            menuButtonRef: messageActionButtonRef,
            // Force show the action button while the flyout is open (otherwise this will dismiss when the pointer is hovered over the flyout)
            forceShow: chatMessageActionFlyoutTarget === messageActionButtonRef,
            onActionButtonClick: () => {
                // Open chat action flyout, and set the context menu to target the chat message action button
                setChatMessageActionFlyoutTarget(messageActionButtonRef);
            },
            theme
        });
    const onActionFlyoutDismiss = useCallback(() => {
        // When the flyout dismiss is called, since we control if the action flyout is visible
        // or not we need to set the target to undefined here to actually hide the action flyout
        setChatMessageActionFlyoutTarget(undefined);
    }, [setChatMessageActionFlyoutTarget]);
    const chatMessage = (React.createElement(React.Fragment, null,
        React.createElement("div", { ref: messageRef },
            React.createElement(Chat.Message, { className: mergeStyles(messageContainerStyle), styles: messageContainerStyle, content: React.createElement(ChatMessageContent, { message: message, liveAuthorIntro: strings.liveAuthorIntro }), author: React.createElement(Text, { className: chatMessageDateStyle }, message.senderDisplayName), mine: message.mine, timestamp: React.createElement(Text, { "data-ui-id": ids.messageTimestamp }, message.createdOn
                    ? showDate
                        ? formatTimestampForChatMessage(message.createdOn, new Date(), strings)
                        : formatTimeForChatMessage(message.createdOn)
                    : undefined), details: message.editedOn ? React.createElement("div", { className: chatMessageEditedTagStyle(theme) }, strings.editedTag) : undefined, positionActionMenu: false, actionMenu: actionMenuProps, onTouchStart: () => setWasInteractionByTouch(true), onPointerDown: () => setWasInteractionByTouch(false), onKeyDown: () => setWasInteractionByTouch(false), onClick: () => wasInteractionByTouch && setChatMessageActionFlyoutTarget(messageRef) })),
        chatActionsEnabled && (React.createElement(ChatMessageActionFlyout, { hidden: !chatMessageActionFlyoutTarget, target: chatMessageActionFlyoutTarget, increaseFlyoutItemSize: wasInteractionByTouch, onDismiss: onActionFlyoutDismiss, onEditClick: onEditClick, onRemoveClick: onRemoveClick, strings: strings }))));
    return chatMessage;
};
//# sourceMappingURL=ChatMessageComponentAsMessageBubble.js.map