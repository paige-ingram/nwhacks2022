/// <reference types="react" />
import { IMessageBarProps } from '@fluentui/react';
/**
 * Props for {@link ErrorBar}.
 *
 * In addition to the following, {@link ErrorBar} forwards all
 * {@link @fluentui/react#IMessageBarProps} to the underlying {@link @fluentui/react#MessageBar}.
 *
 * @public
 */
export interface ErrorBarProps extends IMessageBarProps {
    /**
     * Strings shown on the UI on errors.
     */
    strings?: ErrorBarStrings;
    /**
     * Currently active errors.
     */
    activeErrorMessages: ActiveErrorMessage[];
}
/**
 * All strings that may be shown on the UI in the {@link ErrorBar}.
 *
 * @public
 */
export interface ErrorBarStrings {
    /**
     * Unable to reach Chat service.
     *
     * This can mean:
     *   - Incorrect Azure Communication Services endpoint was provided.
     *   - User's network connection is down.
     */
    unableToReachChatService: string;
    /**
     * User does not have access to the Chat service.
     * This usually means that either the Azure Communication Services endpiont or the token provided are incorrect.
     */
    accessDenied: string;
    /**
     * User is no longer on the thread.
     *
     * See also: {@link ErrorBarStrings.sendMessageNotInChatThread} for a more specific error.
     */
    userNotInChatThread: string;
    /**
     * Sending message failed because user is no longer on the thread.
     */
    sendMessageNotInChatThread: string;
    /**
     * A generic message when sending message fails.
     * Prefer more specific error strings when possible.
     */
    sendMessageGeneric: string;
    /**
     * A generic message when starting video fails.
     */
    startVideoGeneric: string;
    /**
     * A generic message when starting video fails.
     */
    stopVideoGeneric: string;
    /**
     * A generic message when muting microphone fails.
     */
    muteGeneric: string;
    /**
     * A generic message when unmuting microphone fails.
     */
    unmuteGeneric: string;
    /**
     * A generic message when starting screenshare fails.
     */
    startScreenShareGeneric: string;
    /**
     * A generic message when stopping screenshare fails.
     */
    stopScreenShareGeneric: string;
    /**
     * Message shown when poor network quality is detected during a call.
     */
    callNetworkQualityLow: string;
    /**
     * Message shown on failure to detect audio output devices.
     */
    callNoSpeakerFound: string;
    /**
     * Message shown on failure to detect audio input devices.
     */
    callNoMicrophoneFound: string;
    /**
     * Message shown when microphone can be enumerated but access is blocked by the system.
     */
    callMicrophoneAccessDenied: string;
    /**
     * Message shown when microphone is muted by the system (not by local or remote participants)
     */
    callMicrophoneMutedBySystem: string;
    /**
     * Mac OS specific message shown when microphone can be enumerated but access is
     * blocked by the system.
     */
    callMacOsMicrophoneAccessDenied: string;
    /**
     * Message shown when poor network causes local video stream to be frozen.
     */
    callLocalVideoFreeze: string;
    /**
     * Message shown when camera can be enumerated but access is blocked by the system.
     */
    callCameraAccessDenied: string;
    /**
     * Message shown when local video fails to start because camera is already in use by
     * another applciation.
     */
    callCameraAlreadyInUse: string;
    /**
     * Mac OS specific message shown when system denies access to camera.
     */
    callMacOsCameraAccessDenied: string;
    /**
     * Mac OS specific message shown when system denies sharing local screen on a call.
     */
    callMacOsScreenShareAccessDenied: string;
}
/**
 * All errors that can be shown in the {@link ErrorBar}.
 *
 * @public
 */
export declare type ErrorType = keyof ErrorBarStrings;
/**
 * Active error messages to be shown via {@link ErrorBar}.
 *
 * @public
 */
export interface ActiveErrorMessage {
    /**
     * Type of error that is active.
     */
    type: ErrorType;
    /**
     * The latest timestamp when this error was observed.
     *
     * When available, this is used to track errors that have already been seen and dismissed
     * by the user.
     */
    timestamp?: Date;
}
/**
 * A component to show error messages on the UI.
 * All strings that can be shown are accepted as the {@link ErrorBarProps.strings} so that they can be localized.
 * Active errors are selected by {@link ErrorBarProps.activeErrorMessages}.
 *
 * This component internally tracks dismissed by the user.
 *   * Errors that have an associated timestamp: The error is shown on the UI again if it occurs after being dismissed.
 *   * Errors that do not have a timestamp: The error is dismissed until it disappears from the props.
 *         If the error recurs, it is shown in the UI.
 *
 * Uses {@link @fluentui/react#MessageBar} UI element.
 *
 * @public
 */
export declare const ErrorBar: (props: ErrorBarProps) => JSX.Element;
//# sourceMappingURL=ErrorBar.d.ts.map