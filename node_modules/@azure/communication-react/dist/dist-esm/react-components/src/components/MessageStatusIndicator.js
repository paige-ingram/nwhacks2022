// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { Icon, mergeStyles, TooltipHost } from '@fluentui/react';
import React from 'react';
import { useLocale } from '../localization';
import { useTheme } from '../theming';
import { MessageStatusIndicatorErrorIconStyle, MessageStatusIndicatorIconStyle } from './styles/MessageStatusIndicator.styles';
/**
 * Component to display the status of a sent message.
 *
 * Adds an icon and tooltip corresponding to the message status.
 *
 * @public
 */
export const MessageStatusIndicator = (props) => {
    const { status, styles } = props;
    const localeStrings = useLocale().strings.messageStatusIndicator;
    const strings = Object.assign(Object.assign({}, localeStrings), props.strings);
    const theme = useTheme();
    switch (status) {
        case 'failed':
            return (React.createElement(TooltipHost, { content: strings.failedToSendTooltipText },
                React.createElement(Icon, { role: "status", "aria-label": strings.failedToSendTooltipText, iconName: "MessageFailed", className: mergeStyles(MessageStatusIndicatorErrorIconStyle, { color: theme.palette.redDark }, styles === null || styles === void 0 ? void 0 : styles.root) })));
        case 'sending':
            return (React.createElement(TooltipHost, { content: strings.sendingTooltipText },
                React.createElement(Icon, { role: "status", "aria-label": strings.sendingTooltipText, iconName: "MessageSending", className: mergeStyles(MessageStatusIndicatorIconStyle, { color: theme.palette.themePrimary }, styles === null || styles === void 0 ? void 0 : styles.root) })));
        case 'seen':
            return (React.createElement(TooltipHost, { content: strings.seenTooltipText },
                React.createElement(Icon, { role: "status", "aria-label": strings.seenTooltipText, iconName: "MessageSeen", className: mergeStyles({ color: theme.palette.themePrimary }, styles === null || styles === void 0 ? void 0 : styles.root) })));
        case 'delivered':
            return (React.createElement(TooltipHost, { content: strings.deliveredTooltipText },
                React.createElement(Icon, { role: "status", "aria-label": strings.deliveredTooltipText, iconName: "MessageDelivered", className: mergeStyles(MessageStatusIndicatorIconStyle, { color: theme.palette.themePrimary }, styles === null || styles === void 0 ? void 0 : styles.root) })));
        default:
            return React.createElement(React.Fragment, null);
    }
};
//# sourceMappingURL=MessageStatusIndicator.js.map