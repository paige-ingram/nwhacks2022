// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { Icon, mergeStyles, Persona, Stack, Text } from '@fluentui/react';
import { Ref } from '@fluentui/react-northstar';
import React, { useLayoutEffect, useMemo, useRef, useState } from 'react';
import { useIdentifiers } from '../identifiers';
import { useTheme } from '../theming';
import { disabledVideoHint, displayNameStyle, iconContainerStyle, isSpeakingBorderDiv, overlayContainerStyles, rootStyles, videoContainerStyles, videoHint, tileInfoContainerStyle } from './styles/VideoTile.styles';
import { getVideoTileOverrideColor } from './utils/videoTileStylesUtils';
// Coin max size is set to PersonaSize.size100
const PERSONA_MAX_SIZE = 100;
// Coin min size is set PersonaSize.size32
const PERSONA_MIN_SIZE = 32;
const DefaultPlaceholder = (props) => {
    const { text, noVideoAvailableAriaLabel, coinSize, styles, hidePersonaDetails } = props;
    return (React.createElement(Stack, { className: mergeStyles({ position: 'absolute', height: '100%', width: '100%' }) },
        React.createElement(Persona, { styles: styles, coinSize: coinSize, hidePersonaDetails: hidePersonaDetails, text: text !== null && text !== void 0 ? text : '', initialsTextColor: "white", "aria-label": noVideoAvailableAriaLabel !== null && noVideoAvailableAriaLabel !== void 0 ? noVideoAvailableAriaLabel : '' })));
};
const defaultPersonaStyles = { root: { margin: 'auto', maxHeight: '100%' } };
/**
 * A component to render the video stream for a single call participant.
 *
 * Use with {@link GridLayout} in a {@link VideoGallery}.
 *
 * @public
 */
export const VideoTile = (props) => {
    const { children, displayName, initialsName, isMirrored, isMuted, onRenderPlaceholder, renderElement, showLabel = true, showMuteIndicator = true, styles, userId, noVideoAvailableAriaLabel, isSpeaking } = props;
    const [personaSize, setPersonaSize] = useState(100);
    const videoTileRef = useRef(null);
    const theme = useTheme();
    const isVideoRendered = !!renderElement;
    const observer = useRef(new ResizeObserver((entries) => {
        const { width, height } = entries[0].contentRect;
        const personaSize = Math.min(width, height) / 3;
        setPersonaSize(Math.max(Math.min(personaSize, PERSONA_MAX_SIZE), PERSONA_MIN_SIZE));
    }));
    useLayoutEffect(() => {
        if (videoTileRef.current) {
            observer.current.observe(videoTileRef.current);
        }
        const currentObserver = observer.current;
        return () => currentObserver.disconnect();
    }, [observer, videoTileRef]);
    const placeholderOptions = {
        userId,
        text: initialsName || displayName,
        noVideoAvailableAriaLabel,
        coinSize: personaSize,
        styles: defaultPersonaStyles,
        hidePersonaDetails: true
    };
    const videoHintWithBorderRadius = mergeStyles(videoHint, { borderRadius: theme.effects.roundedCorner4 });
    const tileInfoStyle = useMemo(() => mergeStyles(isVideoRendered ? videoHintWithBorderRadius : disabledVideoHint, getVideoTileOverrideColor(isVideoRendered, theme, 'neutralPrimary'), styles === null || styles === void 0 ? void 0 : styles.displayNameContainer), [isVideoRendered, videoHintWithBorderRadius, theme, styles === null || styles === void 0 ? void 0 : styles.displayNameContainer]);
    const ids = useIdentifiers();
    return (React.createElement(Ref, { innerRef: videoTileRef },
        React.createElement(Stack, { "data-ui-id": ids.videoTile, className: mergeStyles(rootStyles, {
                background: theme.palette.neutralLighter,
                borderRadius: theme.effects.roundedCorner4
            }, styles === null || styles === void 0 ? void 0 : styles.root) },
            React.createElement("div", { className: mergeStyles(isSpeakingBorderDiv, {
                    borderRadius: theme.effects.roundedCorner4,
                    border: `0.25rem solid ${isSpeaking ? theme.palette.themePrimary : 'transparent'}`
                }) }),
            isVideoRendered ? (React.createElement(Stack, { className: mergeStyles(videoContainerStyles, isMirrored && { transform: 'scaleX(-1)' }, styles === null || styles === void 0 ? void 0 : styles.videoContainer) }, renderElement)) : (React.createElement(Stack, { className: mergeStyles(videoContainerStyles) }, onRenderPlaceholder ? (onRenderPlaceholder(userId !== null && userId !== void 0 ? userId : '', placeholderOptions, DefaultPlaceholder)) : (React.createElement(DefaultPlaceholder, Object.assign({}, placeholderOptions))))),
            showLabel && (displayName || (showMuteIndicator && isMuted)) && (React.createElement(Stack, { horizontal: true, className: tileInfoContainerStyle },
                React.createElement(Stack, { horizontal: true, className: tileInfoStyle },
                    displayName && (React.createElement(Text, { className: mergeStyles(displayNameStyle), title: displayName }, displayName)),
                    showMuteIndicator && isMuted && (React.createElement(Stack, { className: mergeStyles(iconContainerStyle) },
                        React.createElement(Icon, { iconName: "VideoTileMicOff" })))))),
            children && (React.createElement(Stack, { className: mergeStyles(overlayContainerStyles, styles === null || styles === void 0 ? void 0 : styles.overlayContainer) }, children)))));
};
//# sourceMappingURL=VideoTile.js.map