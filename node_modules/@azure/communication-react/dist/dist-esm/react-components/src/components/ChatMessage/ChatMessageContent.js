// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import React from 'react';
import { _formatString } from "../../../../acs-ui-common/src";
import { Parser } from 'html-to-react';
import Linkify from 'react-linkify';
import { LiveMessage } from 'react-aria-live';
import { Link } from '@fluentui/react';
/** @private */
export const ChatMessageContent = (props) => {
    switch (props.message.contentType) {
        case 'text':
            return MessageContentAsText(props.message, props.liveAuthorIntro);
        case 'html':
            return MessageContentAsRichTextHTML(props.message, props.liveAuthorIntro);
        case 'richtext/html':
            return MessageContentAsRichTextHTML(props.message, props.liveAuthorIntro);
        default:
            console.warn('unknown message content type');
            return React.createElement(React.Fragment, null);
    }
};
const MessageContentAsRichTextHTML = (message, liveAuthorIntro) => {
    const htmlToReactParser = new Parser();
    const liveAuthor = _formatString(liveAuthorIntro, { author: `${message.senderDisplayName}` });
    return (React.createElement("div", { "data-ui-status": message.status },
        React.createElement(LiveMessage, { message: `${message.mine ? '' : liveAuthor} ${extractContent(message.content || '')}`, "aria-live": "polite" }),
        htmlToReactParser.parse(message.content)));
};
const MessageContentAsText = (message, liveAuthorIntro) => {
    const liveAuthor = _formatString(liveAuthorIntro, { author: `${message.senderDisplayName}` });
    return (React.createElement("div", { "data-ui-status": message.status },
        React.createElement(LiveMessage, { message: `${message.mine ? '' : liveAuthor} ${message.content}`, "aria-live": "polite" }),
        React.createElement(Linkify, { componentDecorator: (decoratedHref, decoratedText, key) => {
                return (React.createElement(Link, { target: "_blank", href: decoratedHref, key: key }, decoratedText));
            } }, message.content)));
};
// https://stackoverflow.com/questions/28899298/extract-the-text-out-of-html-string-using-javascript
const extractContent = (s) => {
    const span = document.createElement('span');
    span.innerHTML = s;
    return span.textContent || span.innerText;
};
//# sourceMappingURL=ChatMessageContent.js.map