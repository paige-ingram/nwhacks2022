// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { mergeStyles } from '@fluentui/react';
import React, { useEffect, useRef } from 'react';
import { invertedVideoStyle, mediaContainer } from './styles/StreamMedia.styles';
import { useTheme } from '../theming';
/**
 * Utility component to convert an HTMLElement with a video stream into a JSX element.
 *
 * Use to convert an HTMLElement returned by headless calling API into a component that can be rendered as a {@link VideoTile}.
 *
 * @public
 */
export const StreamMedia = (props) => {
    const containerEl = useRef(null);
    const theme = useTheme();
    const { isMirrored, videoStreamElement, styles } = props;
    useEffect(() => {
        const container = containerEl.current;
        if (!container) {
            return;
        }
        // If videoStreamElement changes, we clear the container to make sure we don't have duplicate, and replace it with
        // the new videoStreamElement. If videoStreamElement is undefined nothing is appended and container should be empty
        // and we don't render anyting.
        container.innerHTML = '';
        if (videoStreamElement) {
            container.appendChild(videoStreamElement);
        }
        return () => {
            container.innerHTML = '';
        };
    }, [videoStreamElement]);
    return (React.createElement("div", { className: mergeStyles(isMirrored ? invertedVideoStyle(theme) : mediaContainer(theme), styles === null || styles === void 0 ? void 0 : styles.root), ref: containerEl }));
};
//# sourceMappingURL=StreamMedia.js.map