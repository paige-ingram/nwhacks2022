// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { useCallback, useState } from 'react';
import { ChatMessageComponentAsEditBox } from './ChatMessageComponentAsEditBox';
import { ChatMessageComponentAsMessageBubble } from './ChatMessageComponentAsMessageBubble';
/**
 * @private
 */
export const ChatMessageComponent = (props) => {
    var _a;
    const [isEditing, setIsEditing] = useState(false);
    const onEditClick = useCallback(() => setIsEditing(true), [setIsEditing]);
    const { onDeleteMessage, message } = props;
    const onRemoveClick = useCallback(() => {
        if (onDeleteMessage && message.messageId) {
            onDeleteMessage(message.messageId);
        }
    }, [message.messageId, onDeleteMessage]);
    if (props.message.messageType !== 'chat') {
        return React.createElement(React.Fragment, null);
    }
    else if (isEditing) {
        return (React.createElement(ChatMessageComponentAsEditBox, { initialValue: (_a = props.message.content) !== null && _a !== void 0 ? _a : '', inlineEditButtons: props.inlineAcceptRejectEditButtons, strings: props.strings, onSubmit: (text) => __awaiter(void 0, void 0, void 0, function* () {
                props.onUpdateMessage &&
                    props.message.messageId &&
                    (yield props.onUpdateMessage(props.message.messageId, text));
                setIsEditing(false);
            }), onCancel: () => {
                setIsEditing(false);
            } }));
    }
    else {
        return React.createElement(ChatMessageComponentAsMessageBubble, Object.assign({}, props, { onRemoveClick: onRemoveClick, onEditClick: onEditClick }));
    }
};
//# sourceMappingURL=ChatMessageComponent.js.map